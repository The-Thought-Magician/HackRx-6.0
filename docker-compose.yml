services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trieve_postgres
    environment:
      POSTGRES_DB: trieve
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: trieve_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: trieve_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: trieve_minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak for OIDC authentication
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: trieve_keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: password
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Tika for document processing
  tika:
    image: apache/tika:latest
    container_name: trieve_tika
    ports:
      - "9998:9998"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trieve Server
  trieve-server:
    image: trieve/server:latest
    container_name: trieve_server
    ports:
      - "8090:8090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
      keycloak:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/trieve
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ""
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: trieve
      TIKA_URL: http://tika:9998
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      SECRET_KEY: your-secret-key-for-trieve
      SMTP_RELAY: smtp.gmail.com
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      ADMIN_API_KEY: admin-api-key-12345
      BASE_SERVER_URL: http://localhost:8090
      OIDC_CLIENT_ID: trieve
      OIDC_CLIENT_SECRET: trieve-secret
      OIDC_AUTH_REDIRECT_URL: http://localhost:8090/auth/callback
      OIDC_ISSUER_URL: http://localhost:8080/realms/trieve
      OIDC_AUTH_URL: http://localhost:8080/realms/trieve/protocol/openid-connect/auth
      OIDC_TOKEN_URL: http://localhost:8080/realms/trieve/protocol/openid-connect/token
    volumes:
      - ./uploads:/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Our Insurance RAG API
  insurance-rag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insurance_rag_api
    ports:
      - "8000:8000"
    depends_on:
      trieve-server:
        condition: service_healthy
    environment:
      DEBUG: "true"
      SECRET_KEY: your-insurance-api-secret-key
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      DATABASE_URL: sqlite:///./insurance_rag.db
      TRIEVE_API_KEY: admin-api-key-12345
      TRIEVE_DATASET_ID: ${TRIEVE_DATASET_ID:-}
      TRIEVE_BASE_URL: http://trieve-server:8090
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: gpt-4
      MAX_FILE_SIZE: 52428800
      UPLOAD_DIR: /uploads
    volumes:
      - ./uploads:/uploads
      - ./insurance_rag.db:/app/insurance_rag.db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  minio_data: