services:
  # Optional services (disabled in simplified mode). Enable by running with profile 'full'
  postgres:
    image: postgres:15
    container_name: trieve_postgres
    profiles: ["full"]
    environment:
      POSTGRES_DB: trieve
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: trieve_redis
    profiles: ["full"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: trieve_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped

  # Our Insurance RAG API (standalone mode)
  insurance-rag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: insurance_rag_api
    ports:
      - "8000:8000"
    depends_on:
      qdrant:
        condition: service_started
    environment:
      DEBUG: "true"
      SECRET_KEY: your-insurance-api-secret-key
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      DATABASE_URL: sqlite:////app/data/insurance_rag.db
      # Direct Qdrant integration instead of Trieve
      QDRANT_URL: http://qdrant:6333
      QDRANT_API_KEY: ""
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: gpt-4
      MAX_FILE_SIZE: 52428800
      UPLOAD_DIR: /uploads
    volumes:
      - ./uploads:/uploads
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  insurance-rag-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: insurance_rag_frontend
    ports:
      - "3001:3000"
    depends_on:
      insurance-rag-api:
        condition: service_healthy
    environment:
      NODE_ENV: production
      # Internal container-to-container base (used on SSR / server components)
      INTERNAL_API_BASE_URL: http://insurance-rag-api:8000
      # Public base for browser (host mapped port)
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_API_URL: http://localhost:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  qdrant_data: